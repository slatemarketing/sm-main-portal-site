// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CLIENT
}

enum InvoiceStatus {
  DENIED
  PENDING
  PAID
  CANCELLED
  REPORTED
}

enum CompanyStatus {
  PENDING
  ACTIVE
  INACTIVE
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model User {
  id            String     @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  role          UserRole   @default(CLIENT)
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  profile       Profile?
  invoices      Invoices[]
  companyId     String?
  company       Company?   @relation(fields: [companyId], references: [id])

  @@unique([email])
  @@map("user")
}

model Company {
  id            String @id @default(cuid())
  companyNumber Int    @default(autoincrement())

  name        String
  description String?
  logo        String?
  email       String
  phone       String?
  status      CompanyStatus @default(PENDING)

  address    String
  city       String
  state      String?
  postalCode String
  country    String  @default("USA")

  billingEmail      String?
  billingAddress    String?
  billingCity       String?
  billingState      String?
  billingPostalCode String?
  billingCountry    String  @default("USA")
  taxId             String?

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("company")
}

model Profile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  firstName String?
  lastName  String?
  company   String?
  phone     String?
  bio       String?
  avatar    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoices {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  title         String
  name          String
  invoiceNumber Int       @default(autoincrement())
  InvoiceId     String    @default(cuid())
  company       String?
  amount        String?
  date          DateTime?
  email         String?

  pdfURL String?

  status InvoiceStatus @default(PENDING)
  paid   Boolean       @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
